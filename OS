#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_LEN 1024
#define DELIM " \t\r\n\a"

char *get_prompt() {
        return "# ";
    
}

char **parse_command(char *line) {
    int bufsize = 64, position = 0;
    char **tokens = malloc(bufsize * sizeof(char*));
    char *token;

    if (!tokens) {
        perror("hw4");
        exit(EXIT_FAILURE);
    }

    token = strtok(line, DELIM);
    while (token != NULL) {
        tokens[position] = token;
        position++;

        if (position >= bufsize) {
            bufsize += 64;
            tokens = realloc(tokens, bufsize * sizeof(char*));
            if (!tokens) {
                perror("hw4");
                exit(EXIT_FAILURE);
            }
        }

        token = strtok(NULL, DELIM);
    }
    tokens[position] = NULL;
    return tokens;
}

void execute_command(char **args) {
    pid_t pid, wpid;
    int status;

    pid = fork();
    if (pid == 0) {
        // 자식 프로세스
        if (execvp(args[0], args) == -1) {
            fprintf(stderr, "execvp(%s) is failed\n", args[0]);
            perror("hw4");
            exit(EXIT_FAILURE);
        }
    } else if (pid < 0) {
        // fork 실패
        perror("hw4");
    } else {
        // 부모 프로세스
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
        if(wpid == pid) {
        	printf("(%d)\n", wpid);
        }
    }
}

int main(int argc, char **argv) {
    char *line;
    char **args;

    do {
        printf("%s", get_prompt());
        line = malloc(MAX_LEN);
        fgets(line, MAX_LEN, stdin);
        args = parse_command(line);

        if (args[0] != NULL) {
            if (strcmp(args[0], "cd") == 0) {
                if (args[1] == NULL) {
                    chdir(getenv("HOME"));
                } else {
                    if (chdir(args[1]) != 0) {
                        perror("hw4");
                    }
                }
                char cwd[MAX_LEN];
                if (getcwd(cwd, sizeof(cwd)) != NULL) {
                    printf("%s\n", cwd);
                } else {
                    perror("hw4");
                }
            } else if (strcmp(args[0], "exit") == 0 || strcmp(args[0], "quit") == 0) {
                break;
            } else {
                execute_command(args);
            }
        }

        free(line);
        free(args);
    } while (1);

    return EXIT_SUCCESS;
}



CC=gcc
CFLAGS=-I.

hw4: hw4.o
	$(CC) -o hw4 hw4.o $(CFLAGS)

hw4.o: hw4.c
	$(CC) -c hw4.c $(CFLAGS)

clean:
	rm -f *.o hw4

